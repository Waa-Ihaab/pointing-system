#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <Adafruit_Fingerprint.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>


// Define screen dimensions
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
// Define I2C address
#define OLED_I2C_ADDRESS 0x3C
// Define I2C pins for ESP8266
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


#if (defined(__AVR__) || defined(ESP8266)) && !defined(__AVR_ATmega2560__)
// For UNO and others without hardware serial, we must use software serial...
// pin #2 is IN from sensor (GREEN wire)
// pin #3 is OUT from arduino  (WHITE wire)
// Set up the serial port to use softwareserial..
SoftwareSerial mySerial(D7, D8);

#else
// On Leonardo/M0/etc, others with hardware serial, use hardware serial!
// #0 is green wire, #1 is white
#define mySerial Serial1

#endif

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);



// Remplacez par les informations de votre réseau WiFi
const char* ssid = "PICI";
const char* password = "123123123";

// Créez une instance du serveur web
ESP8266WebServer server(80);

// Variable pour stocker l'ID reçu
String receivedId;

void setup() {

  // set the data rate for the sensor serial port
  finger.begin(57600);

  // Initialize the display
  if(!display.begin(SSD1306_SWITCHCAPVCC, OLED_I2C_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }


  Serial.begin(115200);
  for (int i = 0; i <= 127; i++) {
    deleteFingerprint(i);
  }
  // Initialisez le port série pour le débogage
  
  
  
  Serial.println("\n\nAdafruit Fingerprint sensor enrollment");

   // Clear the display buffer
  display.clearDisplay();

  // Set text properties
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 20);

  // Display the message
  display.println(F("Adafruit Fingerprint"));
  display.setCursor(0, 30); // Move to the next line
  display.println(F("sensor enrollment"));
  display.display();
   // Clear the display buffer
  display.clearDisplay();
  

  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1) { delay(1); }
  }

  // Connectez-vous au réseau WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 20);

    // Display the message
    display.println(F("Connecting to WiFi..."));
    display.display();
    // Clear the display buffer
    display.clearDisplay();
  }
  Serial.println("Connected to WiFi");
  //display in oled
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 20);

  // Display the message
  display.println(F("Connected to WiFi"));
  display.display();
  // Clear the display buffer
    display.clearDisplay();

  // Configurez la route pour traiter les requêtes POST
  server.on("/data", HTTP_POST, []() {
    if (server.hasArg("id")) {

      receivedId = server.arg("id");
      
      uint8_t  id = atoi(receivedId.c_str());
      Serial.println(receivedId + " " +String(id));
      Serial.println("ID reçu: " + receivedId);

      while (!  getFingerprintEnroll(id) );
      server.send(200, "text/plain", "ID reçu avec succès");
    } else {
      server.send(400, "text/plain", "Pas de données reçues");
    }
  });

  // Démarrez le serveur
  server.begin();
  Serial.println("Server started");


  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 20);

  // Display the message
  display.println(F("Server started"));
  display.display();
   // Clear the display buffer
  display.clearDisplay();
}


void loop() {
  server.handleClient();
  int fingerprintID = getFingerprintID();
  delay(50);
  if (fingerprintID >0)
  {
    Serial.println("FingerprintID Found:"+String(fingerprintID));
    HTTPClient http;
    WiFiClient wifiClient;
    
    String url = "http://192.168.137.1/Test/esp.php?check&id=" + String(fingerprintID);
    if(http.begin(wifiClient,url.c_str()) ){
        int httpCode = http.GET();

          if (httpCode > 0) {
            String payload = http.getString();
            Serial.println("HTTP Response code: " + String(httpCode));
            Serial.println("Response: " + payload);
          } else {
            Serial.println("Error on HTTP request");
        }

          http.end();
    }

  }
  
}




uint8_t getFingerprintEnroll(uint8_t id) {

  int p = -1;
  Serial.print("Waiting for valid finger to enroll as #"); Serial.println(id);
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 20);

  // Display the message
  display.println(F("Waiting for valid"));
  display.setCursor(0, 30);
  display.println(F("finger to enroll as #"));display.print(id);
  display.display();
  // Clear the display buffer
  display.clearDisplay();

  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
       display.clearDisplay();
        display.setCursor(0, 20);
        display.println(F("Image taken"));
        display.display();
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println(".");
      display.clearDisplay();
        display.setCursor(0, 20);
        display.println(F("."));
        display.display();
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      display.clearDisplay();
        display.setCursor(0, 20);
        display.println(F("Imaging error"));
        display.display();
      break;
    default:
      Serial.println("Unknown error");
      break;
    }
  }

  // OK success!

  p = finger.image2Tz(1);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      display.clearDisplay();
        display.setCursor(0, 20);
        display.println(F("Image converted"));
        display.display();
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      display.clearDisplay();
        display.setCursor(0, 20);
        display.println(F("Communication error"));
        display.display();
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  Serial.println("Remove finger");
  display.clearDisplay();
        display.setCursor(0, 20);
        display.println(F("Remove finger"));
        display.display();
  delay(2000);
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = finger.getImage();
  }
  Serial.print("ID "); Serial.println(id);
  display.clearDisplay();
        display.setCursor(0, 20);
        display.println(F("ID"));display.println(id);
        display.display();
  p = -1;
  Serial.println("Place same finger again");
  display.clearDisplay();
        display.setCursor(0, 20);
        display.println(F("Place same finger again"));display.println(id);
        display.display();

  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");display.clearDisplay();
        display.setCursor(0, 20);
        display.println(F("Image taken"));
        display.display();
      break;
    case FINGERPRINT_NOFINGER:
      Serial.print(".");
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
      break;
    }
  }

  // OK success!

  p = finger.image2Tz(2);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      display.clearDisplay();
        display.setCursor(0, 20);
        display.println(F("Image converted"));
        display.display();
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  // OK converted!
  Serial.print("Creating model for #");  Serial.println(id);
  display.clearDisplay();
        display.setCursor(0, 20);
        display.println(F("Creating model for #"));display.println(id);
        display.display();

  p = finger.createModel();
  if (p == FINGERPRINT_OK) {
    Serial.println("Prints matched!");
    display.clearDisplay();
        display.setCursor(0, 20);
        display.println(F("Prints matched!"));
        display.display();
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_ENROLLMISMATCH) {
    Serial.println("Fingerprints did not match");
    display.clearDisplay();
        display.setCursor(0, 20);
        display.println(F("Fingerprints did not match"));
        display.display();
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }

  Serial.print("ID "); Serial.println(id);
  p = finger.storeModel(id);
  if (p == FINGERPRINT_OK) {
    Serial.println("Stored!");
    display.clearDisplay();
        display.setCursor(0, 20);
        display.println(F("Stored!"));
        display.display();
    HTTPClient http;
    WiFiClient wifiClient;
    
    String url = "http://192.168.137.1/Test/users.php?validate_fingerprint&fingerprint_id=" + String(id);
    if(http.begin(wifiClient,url.c_str()) ){
        int httpCode = http.GET();

          if (httpCode > 0) {
            String payload = http.getString();
            Serial.println("HTTP Response code: " + String(httpCode));
            Serial.println("Response: " + payload);
          } else {
            Serial.println("Error on HTTP request");
        }

          http.end();
    }
    else{
      Serial.println("Failed Http begin");
    }


  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not store in that location");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }

  return true;
}




int getFingerprintID()
{
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK)  return -1;

  return finger.fingerID;
}


uint8_t deleteFingerprint(uint8_t id) {
  uint8_t p = -1;

  p = finger.deleteModel(id);

  if (p == FINGERPRINT_OK) {
    Serial.println("Deleted!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not delete in that location");
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
  } else {
    Serial.print("Unknown error: 0x"); Serial.println(p, HEX);
  }

  return p;
}
